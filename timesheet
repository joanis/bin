#!/usr/bin/env perl
#
# Calculates time spent on each task in an org-mode timesheet.
#
# General format of a supported org-mode timesheet (ignore '# ' on each line):
# * 2016 -- This is the year, the reste of the line is ignored.
# ** 01 January -- The month has two digits, the rest of the line is ignored.
# *** 10 Sunday -- The day also has two digits, the rest of the line is ignored.
# **** 19:00/21:30 Here's a log entry.
# More details can be added under the entry, will be ignored.
# There can be multiple entries for a day. No check is made against overlaps.
#
# Usage notes:
# - If an inverval finishes at 1 AM the following day, use 25:00. If it ends the
#   day after and you don't want to split in daily intervals, use 49:00. Doesn't
#   matter if it's not a real time. (Won't work over 99 h.)
#
# Author: Maxime Joanis (@MaximeJ)
# Created: 2012?

use strict;
use warnings;
use Getopt::Long;

my $modeDenormalize = 0;
my $verbose = 0;
my $filename = '';
GetOptions('denormalize' => \$modeDenormalize,
           'verbose' => \$verbose);
#print "denormalize: $modeDenormalize\n";

# if no arg file, use timelog?

if ($verbose) {
    print "filename: $filename\n";
    print "ARGV: @ARGV\n";
}

# Denormalize mode is used on its own. No other args but the input file.
# Keep only lines with time intervals and add missing info (year, month, day).
if ($modeDenormalize) {
    print('denormalize mode') if $verbose;
    my ($year, $month, $day);
    while (<STDIN>) {
        if (m/^\* (\d{4})/) {
            $year = $1;
        } elsif (m/^\*\* (\d{2})/) {
            $month = $1;
        } elsif (m/^\*\*\* (\d{2})/) {
            $day = $1;
        } elsif (m/^\*\*\*\* (.+)/) {
            # time log entry (probably, would need to verify there's an interval
            print "$year-$month-$day $1\n";
        }
    }
    exit;
}

# 1. Read the file up to the desired date.
# 2. Until next "* " line, print date, time spent, task.

# Read desired date:
print "From date: ";
my $_;
if (@ARGV == 0) {
    $_ = <>;
} else {
    $_ = $ARGV[0];
    print $_ . "\n";
}

my ($year, $month, $day);

if (m/(\d{4})-(\d{2})-(\d{2})/) {
    $year = $1;
    $month = $2;
    $day = $3;
    #print "Date: " . $year . "-" . $month . "-" . $day;
} else {
    die "Wrong date format.";
}

my $inYear = 0;
my $inMonth = 0;
my $inDay = 0;

my $date = $year . "-" . $month . "-" . $day;
my $totalForDay = 0;
my $totalGlobal = 0;

die 'TIMELOG environment variable not set' if !$ENV{'TIMELOG'};

open my $timeLog, "<", $ENV{'TIMELOG'};

while (<$timeLog>) {
    if ($inDay) {
	# process lines until next "* " line
	# keep date updated using "** " and "*** " lines

	if (m/^\*\*\*\* /) { # if this is a work entry
	    processLine($_);
	    print "\t\t\t\t\ttotal: " . $totalForDay . "\n";
	} elsif (m/^\*\*\* (\d\d)/) { # if this is a new day
	    $day = $1;
	    $totalForDay = 0;
	    $date = $year . "-" . $month . "-" . $day;
	    print $date . ":\n";
	} elsif (m/^\*\* (\d\d)/) { # if this is a new month
	    $month = $1;
	} elsif (m/^\* /) { # if this is a new year, or end of entries
	    last;
	}
    } elsif ($inMonth) {
	# look for day
	if (m/^\*\*\* (\d\d)/ && $1 eq $day) {
	    $inDay = 1;
	}
	# just found from where to start
	# exactly at the day specified; can start processing on next line
    } elsif ($inYear) {
	# look for month
	if (m/^\*\* (\d\d)/ && $1 eq $month) {
	    $inMonth = 1;
	}
    } else {
	# look for year
	if (m/^\* (\d{4})/ && $1 eq $year) {
	    $inYear = 1;
	}
    }
}

print "TOTAL: " . $totalGlobal . "\n";
close $timeLog;

# TODO day total
# TODO week total
sub processLine {
    $_ = $_[0];
    if (m%^\*\*\*\* (\d\d:\d\d/\d\d:\d\d(,\d\d:\d\d/\d\d:\d\d)*) (.*)%) {
	my @times = split(/,/, $1);
	my $desc = $3;
	print "\t" . timeRangeToAmount(@times) . "\t" . $desc . "\n";
    }
}

# Receives an array of string time ranges, returns an amount, in hours.
sub timeRangeToAmount {
    my $total = 0;
    foreach $_ (@_) {
	m#(\d\d):(\d\d)/(\d\d):(\d\d)#;
	my $h = $3 - $1;
	my $m = $4 - $2;
	if ($m < 0) {
	    $m += 60;
	    $h -= 1;
	}
	my $partial = $h + $m / 60;
	$total += $partial;
    }
    $totalForDay += $total;
    $totalGlobal += $total;
    return $total;
}
